import{_ as n,W as s,X as a,a1 as p}from"./framework-2afc6763.js";const t={},e=p(`<p>SpringApplication 类默认会把以“<strong>--</strong>”开头的<strong>命令行参数</strong>转化成应用中可以使用的<strong>配置参数</strong>，例如，--spring.profiles.active=dev</p><p>优先级从高到低，高优先级的配置覆盖低优先级的配置，所有配置会形成互补配置。</p><p>1、命令行参数。所有的配置都可以在命令行上进行指定；</p><p>2、Java系统属性（System.getProperties()）；</p><p>在idea中设置 VM options</p><p><img src="https://gitee.com/zysspace/pic/raw/master/images/202204212219982.png" alt="image-20220421221932320"></p><p>启动脚本中设置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> <span class="token parameter variable">-Dbook.name</span><span class="token operator">=</span>sanguo chapter-1-spring-boot-quickstart-1.0.jar

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在程序中使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;book.name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hello，Spring Boot！&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\\3. 操作系统环境变量 ；</p><p>\\4. jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置⽂件</p><p>\\5. jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置⽂件 再来加</p><p>载不带profile</p><p>\\6. jar包外部的application.properties或application.yml(不带spring.profile)配置⽂件</p><p>\\7. jar包内部的application.properties或application.yml(不带spring.profile)配置⽂件</p><p>\\8. @Configuration注解类上的@PropertySource</p>`,17),o=[e];function i(c,l){return s(),a("div",null,o)}const u=n(t,[["render",i],["__file","spring boot 配置文件的加载顺序.html.vue"]]);export{u as default};
