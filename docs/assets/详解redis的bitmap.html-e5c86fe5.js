import{_ as s,W as n,X as a,a1 as e}from"./framework-2afc6763.js";const t={},i=e(`<h3 id="bitmap是什么" tabindex="-1"><a class="header-anchor" href="#bitmap是什么" aria-hidden="true">#</a> <strong>BitMap是什么</strong></h3><p>现代计算机用二进制（位）作为信息的基础单位，1个字节等于8位，例 如“big”字符串是由3个字节组成，但实际在计算机存储时将其用二进制表 示，“big”分别对应的ASCII码分别是98、105、103，对应的二进制分别是01100010、01101001和01100111.</p><p><img src="https://pica.zhimg.com/80/v2-882b0bc19ddf327438bd93713165260e_1440w.png" alt=""></p><p>BitMap就是通过一个bit位来表示某个元素对应的值或者状态,其中的key就是对应元素本身。我们知道8个bit可以组成一个Byte，所以bitmap本身会极大的节省储存空间。</p><p>Bitmaps本身不是一种数据结构，实际上它就是字符串，但是它可以对字符串的位进行操作。</p><p><img src="https://pic1.zhimg.com/80/v2-b83fef7ad38f4a2ed875fd6e59afdf75_1440w.png" alt=""></p><p>可以把Bitmaps想象成一个以位为单位的数组，数组的每个单元只能存储0和1，数组的下标在Bitmap中叫做偏移量。</p><h3 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h3><p>1、设置值</p><p>设置或者清空key的value(字符串)在offset处的bit值(只能只0或者1)。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>setbit key offset value 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置键的第offset个位的值（从0算起），假设现在有20个用户， userid=0，5，11，15，19的用户对网站进行了访问，初始时候是这样</p><p><img src="https://pica.zhimg.com/80/v2-d5d69ffb4595193d11cf3b71cc93e30f_1440w.png" alt=""></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit unique:users:2021-11-27 <span class="token number">0</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit unique:users:2021-11-27 <span class="token number">5</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit unique:users:2021-11-27 <span class="token number">11</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit unique:users:2021-11-27 <span class="token number">15</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit unique:users:2021-11-27 <span class="token number">19</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际应用中，可以对id进行一定运算，比如减去初始值（如果用户id是从某个数值开始的），否则偏移量太大，初始化过程会比较慢，可能会造成redis阻塞。</p><p>2、获取值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>getbit key offset 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取键的第offset位的值（从0开始算）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>127.0.0.1:6379&gt; getbit unique:users:2021-11-27 1
(integer) 0
127.0.0.1:6379&gt; getbit unique:users:2021-11-27 5
(integer) 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、获取Bitmap指定范围值为1的个数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>bitcount <span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>end<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>[start]和[end]代表起始和结束字节数。</p><p>统计2021-11-27这一天的访问用户数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> bitcount unique:users:2021-11-27
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>4、Bitmap间的运算</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>bitop <span class="token function">op</span> destkey key<span class="token punctuation">[</span>key<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>bitop是一个复合操作，它可以做多个Bitmaps的and（交集）、or（并 集）、not（非）、xor（异或）操作并将结果保存在destkey中。</p><p>统计2021-11-26 、2021-11-27这两天都访问过的用户，先初始化2021-11-26 数据</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>setbit unique:users:2021-11-26 <span class="token number">2</span> <span class="token number">1</span>
setbit unique:users:2021-11-26 <span class="token number">5</span> <span class="token number">1</span>
setbit unique:users:2021-11-26 <span class="token number">10</span> <span class="token number">1</span>
setbit unique:users:2021-11-26 <span class="token number">19</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> bitop and unique:users:and:2021-11-26_27 unique:users:2021-11-26 unique:users:2021-11-27
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> bitcount unique:users:and:2021-11-26_27
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用or可以统计月活跃人数</p><h3 id="bitmap的优势、限制" tabindex="-1"><a class="header-anchor" href="#bitmap的优势、限制" aria-hidden="true">#</a> bitmap的优势、限制</h3><p>优势 1.基于最小的单位bit进行存储，所以非常省空间。 2.设置时候时间复杂度O(1)、读取时候时间复杂度O(n)，操作是非常快的。 3.二进制数据的存储，进行相关计算的时候非常快。 4.方便扩容</p><p>限制 redis中bit映射被限制在512MB之内，所以最大是2^32位。建议每个key的位数都控制下，因为读取时候时间复杂度O(n)，越大的串读的时间花销越多。</p><h3 id="bitmap空间、时间粗略计算方式" tabindex="-1"><a class="header-anchor" href="#bitmap空间、时间粗略计算方式" aria-hidden="true">#</a> bitmap空间、时间粗略计算方式</h3><p>在一台2010MacBook Pro上，offset为232-1（分配512MB）需要～300ms，offset为230-1(分配128MB)需要～80ms，offset为228-1（分配32MB）需要～30ms，offset为226-1（分配8MB）需要8ms。&lt;来自官方文档&gt;</p><p>大概的空间占用计算公式是：($offset/8/1024/1024)MB</p><p>假设网站有1亿用户，每天独立访问的用户有5千万，如果每天用集合类 型和Bitmap对比</p><p><img src="https://pic1.zhimg.com/80/v2-935a727e51cd20c74fff8a77a5c07424_1440w.png" alt=""></p><p>很明显，这种情况下使用Bitmap能节省很多的内存空间</p>`,40),p=[i];function r(c,l){return n(),a("div",null,p)}const d=s(t,[["render",r],["__file","详解redis的bitmap.html.vue"]]);export{d as default};
