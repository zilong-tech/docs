import{_ as n,W as s,X as a,a1 as t}from"./framework-2afc6763.js";const e={},p=t(`<h2 id="什么是ribbon" tabindex="-1"><a class="header-anchor" href="#什么是ribbon" aria-hidden="true">#</a> <strong>什么是Ribbon</strong></h2><p>Spring Cloud Ribbon是基于Netflix Ribbon 实现的一套客户端的负载均衡工具，Ribbon客户端组件提供一系列的完善的配置，如超时，重试等。通过Load Balancer获取到服务提供的所有机器实例，Ribbon会自动基于某种规则(轮询，随机)去调用这些服务。Ribbon也可以实现我们自己的负载均衡算法。</p><p>Ribbon 本地负载均衡，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到 JVM 本地，从而在本地实现 RPC 远程服务调用技术。</p><p><img src="http://img.xxfxpt.top/202204102203625.jpg" alt=""></p><h2 id="负载方案" tabindex="-1"><a class="header-anchor" href="#负载方案" aria-hidden="true">#</a> 负载方案</h2><p>LB 负载均衡(Load Balance)是什么 ？</p><p>简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系系统的 HA (高可用)。常见的负载均衡有软件 Nginx，LVS，硬件 F5 等。</p><p>目前主流的负载方案分为以下两种：</p><ul><li>集中式负载均衡，在消费者和服务提供方中间使用独立的代理方式进行负载，有硬件的（比如 F5），也有软件的（比如 Nginx）。</li><li>客户端根据自己的请求情况做负载均衡，Ribbon 就属于客户端自己做负载均衡。</li></ul><p>Nginx 是服务器负载均衡，客户端所有请求都会交给 nginx，然后由nginx 实现转发请求。即负载均衡是由服务端实现的。</p><p><img src="https://note.youdao.com/yws/public/resource/983c803c0f366af153e5c336aa4ac834/xmlnote/074F758C9974417991452EC230F43ED5/13572" alt="https://note.youdao.com/yws/public/resource/983c803c0f366af153e5c336aa4ac834/xmlnote/074F758C9974417991452EC230F43ED5/13572"></p><h3 id="常见负载均衡算法" tabindex="-1"><a class="header-anchor" href="#常见负载均衡算法" aria-hidden="true">#</a> <strong>常见负载均衡算法</strong></h3><ul><li>随机，通过随机选择服务进行执行，一般这种方式使用较少;</li><li>轮训，负载均衡默认实现方式，请求来之后排队处理;</li><li>加权轮训，通过对服务器性能的分型，给高配置，低负载的服务器分配更高的权重，均衡各个服务器的压力;</li><li>地址Hash，通过客户端请求的地址的HASH值取模映射进行服务器调度。 ip hash</li><li>最小连接数，即使请求均衡了，压力不一定会均衡，最小连接数法就是根据服务器的情况，比如请求积压数等参数，将请求分配到当前压力最小的服务器上。 最小活跃数</li></ul><h2 id="ribbon使用" tabindex="-1"><a class="header-anchor" href="#ribbon使用" aria-hidden="true">#</a> <strong>Ribbon使用</strong></h2><p><strong>Spring Cloud快速整合Ribbon</strong></p><p><img src="http://img.xxfxpt.top/202204102337425.png" alt=""></p><p>在order模块中定义接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 根据用户id查询订单信息
     * <span class="token keyword">@param</span> <span class="token parameter">userId</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/order/findOrderByUserId/{userId}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">findOrderByUserId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;根据userId:&quot;</span><span class="token operator">+</span>userId<span class="token operator">+</span><span class="token string">&quot;查询订单信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderEntity</span><span class="token punctuation">&gt;</span></span> orderEntities <span class="token operator">=</span> orderService<span class="token punctuation">.</span><span class="token function">listByUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;orders&quot;</span><span class="token punctuation">,</span> orderEntities<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在消费端user添加**@LoadBalanced**注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestConfig</span> <span class="token punctuation">{</span>

    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@LoadBalanced</span>
    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用order模块中的接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>   

<span class="token keyword">public</span> <span class="token class-name">R</span>  <span class="token function">findOrderByUserId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;根据userId:&quot;</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">&quot;查询订单信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://order/order/findOrderByUserId/&quot;</span><span class="token operator">+</span>id<span class="token punctuation">;</span>
        <span class="token class-name">R</span> result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="loadbalanced-注解" tabindex="-1"><a class="header-anchor" href="#loadbalanced-注解" aria-hidden="true">#</a> <strong>@LoadBalanced 注解</strong></h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@Qualifier</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">LoadBalanced</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@LoadBalanced利用@Qualifier作为restTemplates注入的筛选条件，筛选出具有负载均衡标识的RestTemplate。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoadBalancerAutoConfiguration</span> 
    
    <span class="token comment">//被@LoadBalanced注解的restTemplate会被定制，添加LoadBalancerInterceptor拦截器。</span>
    <span class="token annotation punctuation">@LoadBalanced</span>
    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>
        required <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RestTemplate</span><span class="token punctuation">&gt;</span></span> restTemplates <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
    
    <span class="token annotation punctuation">@Configuration</span>
    <span class="token annotation punctuation">@ConditionalOnMissingClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;org.springframework.retry.support.RetryTemplate&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LoadBalancerInterceptorConfig</span> <span class="token punctuation">{</span>
        <span class="token class-name">LoadBalancerInterceptorConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Bean</span>
        <span class="token keyword">public</span> <span class="token class-name">LoadBalancerInterceptor</span> <span class="token function">ribbonInterceptor</span><span class="token punctuation">(</span><span class="token class-name">LoadBalancerClient</span> loadBalancerClient<span class="token punctuation">,</span> <span class="token class-name">LoadBalancerRequestFactory</span> requestFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoadBalancerInterceptor</span><span class="token punctuation">(</span>loadBalancerClient<span class="token punctuation">,</span> requestFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token annotation punctuation">@Bean</span>
        <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
        <span class="token keyword">public</span> <span class="token class-name">RestTemplateCustomizer</span> <span class="token function">restTemplateCustomizer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">LoadBalancerInterceptor</span> loadBalancerInterceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>restTemplate<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ClientHttpRequestInterceptor</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>restTemplate<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 添加loadBalancerInterceptor拦截器</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>loadBalancerInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
                restTemplate<span class="token punctuation">.</span><span class="token function">setInterceptors</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ribbonclientconfiguration" tabindex="-1"><a class="header-anchor" href="#ribbonclientconfiguration" aria-hidden="true">#</a> RibbonClientConfiguration</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//Ribbon的客户端配置，默认采用DefaultClientConfigImpl实现。    </span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
    <span class="token keyword">public</span> <span class="token class-name">IClientConfig</span> <span class="token function">ribbonClientConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultClientConfigImpl</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultClientConfigImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span><span class="token function">loadProperties</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">CommonClientConfigKey<span class="token punctuation">.</span>ConnectTimeout</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">CommonClientConfigKey<span class="token punctuation">.</span>ReadTimeout</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">CommonClientConfigKey<span class="token punctuation">.</span>GZipPayload</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> config<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//Ribbon的负载均衡策略，默认采用ZoneAvoidanceRule实现，该策略能够在多区 域环境下选出最佳区域的实例进行访问。</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
    <span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">ribbonRule</span><span class="token punctuation">(</span><span class="token class-name">IClientConfig</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>propertiesFactory<span class="token punctuation">.</span><span class="token function">isSet</span><span class="token punctuation">(</span><span class="token class-name">IRule</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">IRule</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>propertiesFactory<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">IRule</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> config<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">ZoneAvoidanceRule</span> rule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZoneAvoidanceRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            rule<span class="token punctuation">.</span><span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> rule<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
 
    <span class="token comment">//Ribbon的实例检查策略，默认采用DummyPing实现，该检查策略是一个特殊的 实现，实际上它并不会检查实例是否可用，而是始终返回true，默认认为所有服务实例都是 可用的</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
    <span class="token keyword">public</span> <span class="token class-name">IPing</span> <span class="token function">ribbonPing</span><span class="token punctuation">(</span><span class="token class-name">IClientConfig</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">IPing</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>propertiesFactory<span class="token punctuation">.</span><span class="token function">isSet</span><span class="token punctuation">(</span><span class="token class-name">IPing</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">IPing</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>propertiesFactory<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">IPing</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> config<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">DummyPing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

   <span class="token comment">//服务实例清单的维护机制，默认采用ConfigurationBasedServerList实现。</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
    <span class="token keyword">public</span> <span class="token class-name">ServerList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Server</span><span class="token punctuation">&gt;</span></span> <span class="token function">ribbonServerList</span><span class="token punctuation">(</span><span class="token class-name">IClientConfig</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>propertiesFactory<span class="token punctuation">.</span><span class="token function">isSet</span><span class="token punctuation">(</span><span class="token class-name">ServerList</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ServerList</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>propertiesFactory<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">ServerList</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> config<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">ConfigurationBasedServerList</span> serverList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBasedServerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            serverList<span class="token punctuation">.</span><span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> serverList<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
    <span class="token keyword">public</span> <span class="token class-name">ServerListUpdater</span> <span class="token function">ribbonServerListUpdater</span><span class="token punctuation">(</span><span class="token class-name">IClientConfig</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PollingServerListUpdater</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment">//负载均衡器，默认采用ZoneAwareLoadBalancer实现，它具备了区域 感知的能力。</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
    <span class="token keyword">public</span> <span class="token class-name">ILoadBalancer</span> <span class="token function">ribbonLoadBalancer</span><span class="token punctuation">(</span><span class="token class-name">IClientConfig</span> config<span class="token punctuation">,</span> <span class="token class-name">ServerList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Server</span><span class="token punctuation">&gt;</span></span> serverList<span class="token punctuation">,</span> <span class="token class-name">ServerListFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Server</span><span class="token punctuation">&gt;</span></span> serverListFilter<span class="token punctuation">,</span> <span class="token class-name">IRule</span> rule<span class="token punctuation">,</span> <span class="token class-name">IPing</span> ping<span class="token punctuation">,</span> <span class="token class-name">ServerListUpdater</span> serverListUpdater<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ILoadBalancer</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>propertiesFactory<span class="token punctuation">.</span><span class="token function">isSet</span><span class="token punctuation">(</span><span class="token class-name">ILoadBalancer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">ILoadBalancer</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>propertiesFactory<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">ILoadBalancer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> config<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ZoneAwareLoadBalancer</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> rule<span class="token punctuation">,</span> ping<span class="token punctuation">,</span> serverList<span class="token punctuation">,</span> serverListFilter<span class="token punctuation">,</span> serverListUpdater<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

   <span class="token comment">// 服务实例清单过滤机制，默认采ZonePreferenceServerListFilter，该 策略能够优先过滤出与请求方处于同区域的服务实例。</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
    <span class="token keyword">public</span> <span class="token class-name">ServerListFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Server</span><span class="token punctuation">&gt;</span></span> <span class="token function">ribbonServerListFilter</span><span class="token punctuation">(</span><span class="token class-name">IClientConfig</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>propertiesFactory<span class="token punctuation">.</span><span class="token function">isSet</span><span class="token punctuation">(</span><span class="token class-name">ServerListFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ServerListFilter</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>propertiesFactory<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">ServerListFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> config<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">ZonePreferenceServerListFilter</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZonePreferenceServerListFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            filter<span class="token punctuation">.</span><span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> filter<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
    <span class="token keyword">public</span> <span class="token class-name">RibbonLoadBalancerContext</span> <span class="token function">ribbonLoadBalancerContext</span><span class="token punctuation">(</span><span class="token class-name">ILoadBalancer</span> loadBalancer<span class="token punctuation">,</span> <span class="token class-name">IClientConfig</span> config<span class="token punctuation">,</span> <span class="token class-name">RetryHandler</span> retryHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RibbonLoadBalancerContext</span><span class="token punctuation">(</span>loadBalancer<span class="token punctuation">,</span> config<span class="token punctuation">,</span> retryHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
    <span class="token keyword">public</span> <span class="token class-name">RetryHandler</span> <span class="token function">retryHandler</span><span class="token punctuation">(</span><span class="token class-name">IClientConfig</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultLoadBalancerRetryHandler</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
    <span class="token keyword">public</span> <span class="token class-name">ServerIntrospector</span> <span class="token function">serverIntrospector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultServerIntrospector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preprocess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RibbonUtils</span><span class="token punctuation">.</span><span class="token function">setRibbonProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token class-name">CommonClientConfigKey<span class="token punctuation">.</span>DeploymentContextBasedVipAddresses</span><span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ribbon负载均衡策略" tabindex="-1"><a class="header-anchor" href="#ribbon负载均衡策略" aria-hidden="true">#</a> <strong>Ribbon负载均衡策略</strong></h3><p><img src="https://note.youdao.com/yws/public/resource/983c803c0f366af153e5c336aa4ac834/xmlnote/E1376C784BB9439BA29A8CF3105D8E9D/13573" alt=""></p><ol><li><strong>RandomRule</strong>： 随机选择一个Server。</li><li><strong>RetryRule</strong>： 对选定的负载均衡策略机上重试机制，在一个配置时间段内当选择Server不成功，则一直尝试使用subRule的方式选择一个可用的server。</li><li><strong>RoundRobinRule</strong>： 轮询选择， 轮询index，选择index对应位置的Server。</li><li><strong>AvailabilityFilteringRule</strong>： 过滤掉一直连接失败的被标记为circuit tripped的后端Server，并过滤掉那些高并发的后端Server或者使用一个AvailabilityPredicate来包含过滤server的逻辑，其实就是检查status里记录的各个Server的运行状态。</li><li><strong>BestAvailableRule</strong>： 选择一个最小的并发请求的Server，逐个考察Server，如果Server被tripped了，则跳过。</li><li><strong>WeightedResponseTimeRule</strong>： 根据响应时间加权，响应时间越长，权重越小，被选中的可能性越低。</li><li><strong>ZoneAvoidanceRule</strong>： 默认的负载均衡策略，即复合判断Server所在区域的性能和Server的可用性选择Server，在没有区域的环境下，类似于轮询(RandomRule)</li><li><strong>NacosRule:</strong> 同集群优先调用</li></ol><h3 id="自定义负载均衡策略" tabindex="-1"><a class="header-anchor" href="#自定义负载均衡策略" aria-hidden="true">#</a> <strong>自定义负载均衡策略</strong></h3><p>通过实现 IRule 接口可以自定义负载策略，主要的选择服务逻辑在 choose 方法中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosRandomWithWeightRule</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractLoadBalancerRule</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">NacosDiscoveryProperties</span> nacosDiscoveryProperties<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Server</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DynamicServerListLoadBalancer</span> loadBalancer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DynamicServerListLoadBalancer</span><span class="token punctuation">)</span> <span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> serviceName <span class="token operator">=</span> loadBalancer<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">NamingService</span> namingService <span class="token operator">=</span> nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">namingServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//nacos基于权重的算法</span>
            <span class="token class-name">Instance</span> instance <span class="token operator">=</span> namingService<span class="token punctuation">.</span><span class="token function">selectOneHealthyInstance</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;:&quot;</span><span class="token operator">+</span>instance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NacosServer</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NacosException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;获取服务实例异常：{}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>修改全局负载均衡策略</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RibbonConfig</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 全局配置
     * 指定负载均衡策略
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">IRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 指定使用Nacos提供的负载均衡策略（优先调用同一集群的实例，基于随机权重）</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NacosRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>修改局部配置</strong>：</p><p>调用指定微服务提供的服务时，使用对应的负载均衡算法</p><p>修改application.yml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 被调用的微服务名  当需要使用局部配置的时候推荐使用这种方式</span>
<span class="token key atrule">order</span><span class="token punctuation">:</span>
 <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
    <span class="token comment">#指定使用Nacos提供的负载均衡策略（优先调用同一集群的实例，基于随机&amp;权重）</span>
    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.alibaba.cloud.nacos.ribbon.NacosRule
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>饥饿加载</strong></p><p>在进行服务调用的时候，如果网络情况不好，第一次调用会超时。</p><p>Ribbon默认懒加载，意味着只有在发起调用的时候才会创建客户端。</p><p>开启饥饿加载，解决第一次调用慢的问题</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
  <span class="token key atrule">eager-load</span><span class="token punctuation">:</span>
    <span class="token comment"># 开启ribbon饥饿加载</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># 配置user使用ribbon饥饿加载，多个使用逗号分隔</span>
    <span class="token key atrule">clients</span><span class="token punctuation">:</span> order

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,45),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","Spring Cloud Ribbon.html.vue"]]);export{r as default};
