import{_ as n,W as s,X as a,a1 as t}from"./framework-2afc6763.js";const e={},p=t(`<p>在实际工作中，重处理是一个非常常见的场景，比如:</p><ul><li>发送消息失败。</li><li>调用远程服务失败。</li></ul><p>这些错误可能是因为网络波动造成的，等待过后重处理就能成功。通常来说，会用try/catch，while循环之类的语法来进行重处理，但是这样的做法缺乏统一性，要多写很多重复代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">doSth</span><span class="token punctuation">(</span><span class="token class-name">String</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> retryRequestService<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">&quot;响应是&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>spring-retry 可以通过注解，在不入侵原有业务逻辑代码的方式下，优雅的实现重处理功能。</p><p>spring-retry 是 Spring 全家桶中提供的开源重试框架，如果你用的是 Spring Boot 项目，那么接入起来会非常简单，只需要三步即可实现快速接入。</p><h3 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖" aria-hidden="true">#</a> 引入依赖</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.retry&lt;/groupId&gt;
  &lt;artifactId&gt;spring-retry&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
	&lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动类添加注解" tabindex="-1"><a class="header-anchor" href="#启动类添加注解" aria-hidden="true">#</a> 启动类添加注解</h3><p>在启动类上加注解 @EnableRetry，让 Spring Boot 项目支持 spring-retry 的重试功能。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableRetry</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法上添加-retryable" tabindex="-1"><a class="header-anchor" href="#方法上添加-retryable" aria-hidden="true">#</a> 方法上添加 <code>@Retryable</code></h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Retryable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> maxAttempts <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> backoff <span class="token operator">=</span> <span class="token annotation punctuation">@Backoff</span><span class="token punctuation">(</span>delay <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test被调用,时间：&quot;</span><span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 模拟异常</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   		 <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;===========出现异常了！===========&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法执行结束=============&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用方法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@RequestMapping(value = &quot;/test&quot;)
public void test(int code) throws Exception {
     cityService.retry(code);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><blockquote><p>test被调用,时间：2022-12-06T10:56:20.081 test被调用,时间：2022-12-06T10:56:20.183 test被调用,时间：2022-12-06T10:56:20.293 test被调用,时间：2022-12-06T10:56:20.404 test被调用,时间：2022-12-06T10:56:20.521 2022-12-06 10:56:20.525 ERROR 16696 --- [nio-8080-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet] : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.Exception: ===========出现异常了！===========] with root cause</p></blockquote><p>解释下注解中参数的定义：</p><p>value：抛出指定异常才会重试 include：和value一样，默认为空，当exclude也为空时，默认所有异常 exclude：指定不处理的异常 maxAttempts：最大重试次数，默认3次 backoff：重试等待策略，默认使用@Backoff，@Backoff的value默认为1000(单位毫秒)，我们设置为2000；multiplier（指定延迟倍数）默认为0，表示固定暂停1秒后进行重试，如果把multiplier设置为1.5，则第一次重试为2秒，第二次为3秒，第三次为4.5秒。</p><p>backoff = @Backoff(delay = 100) delay=100 意味着下一次的重试，要等 100 毫秒之后才能执行。</p><p>如果重试耗尽仍然失败，应该怎么处理？</p><p>当重试耗尽时，<code>RetryOperations</code>可以将控制传递给另一个回调，即<code>RecoveryCallback</code>。<code>Spring-Retry</code>还提供了<code>@Recover</code>注解，用于@Retryable重试失败后处理方法。回调方法不是必要的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Recover</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">,</span> <span class="token keyword">int</span> code<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;回调方法执行！！！！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;retryParam参数值为：&quot;</span><span class="token operator">+</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//记日志到数据库 或者调用其余的方法</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;异常信息:&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回调方法的参数可以可选地包括抛出的异常和（可选）传递给原始可重试方法的参数。</p><p>回调方法注意事项：</p><ul><li>方法的返回值必须与@Retryable方法一致</li><li>方法的第一个参数，必须是Throwable类型的，建议是与@Retryable配置的异常一致</li><li>回调方法与重试方法写在同一个类里面</li></ul><p>测试效果：</p><blockquote><p>test被调用,时间：2022-12-06T11:37:39.272 test被调用,时间：2022-12-06T11:37:39.386 test被调用,时间：2022-12-06T11:37:39.497 test被调用,时间：2022-12-06T11:37:39.604 test被调用,时间：2022-12-06T11:37:39.712 回调方法执行！！！！ retryParam参数值为：0 异常信息:===========出现异常了！===========</p></blockquote>`,28),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","接口重试机制 Spring-Retry.html.vue"]]);export{r as default};
