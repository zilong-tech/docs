const e=JSON.parse('{"key":"v-3def9aa1","path":"/Redis/%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%80%E8%87%B4%E6%80%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html","title":"缓存和数据库一致性解决方案","lang":"zh-CN","frontmatter":{"title":"缓存和数据库一致性解决方案","author":"程序员子龙","index":true,"icon":"discover","category":["Redis"],"description":"引入缓存提高性能 如果你的业务处于起步阶段，流量非常小，那无论是读请求还是写请求，直接操作数据库即可，这时你的架构模型是这样的： 但随着业务量的增长，你的项目请求量越来越大，这时如果每次都从数据库中读数据，那肯定会有性能问题。 这个阶段通常的做法是，引入「缓存」来提高读性能，架构模型就变成了这样： 如何提高缓存利用率？ 想要缓存利用率「最大化」，我们很...","head":[["meta",{"property":"og:url","content":"https://zilong-tech.github.io/docs/docs/Redis/%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%80%E8%87%B4%E6%80%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"}],["meta",{"property":"og:site_name","content":"子龙技术"}],["meta",{"property":"og:title","content":"缓存和数据库一致性解决方案"}],["meta",{"property":"og:description","content":"引入缓存提高性能 如果你的业务处于起步阶段，流量非常小，那无论是读请求还是写请求，直接操作数据库即可，这时你的架构模型是这样的： 但随着业务量的增长，你的项目请求量越来越大，这时如果每次都从数据库中读数据，那肯定会有性能问题。 这个阶段通常的做法是，引入「缓存」来提高读性能，架构模型就变成了这样： 如何提高缓存利用率？ 想要缓存利用率「最大化」，我们很..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-10T09:01:37.000Z"}],["meta",{"property":"article:author","content":"程序员子龙"}],["meta",{"property":"article:modified_time","content":"2023-02-10T09:01:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"缓存和数据库一致性解决方案\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-10T09:01:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员子龙\\"}]}"]]},"headers":[{"level":2,"title":"引入缓存提高性能","slug":"引入缓存提高性能","link":"#引入缓存提高性能","children":[]},{"level":2,"title":"如何提高缓存利用率？","slug":"如何提高缓存利用率","link":"#如何提高缓存利用率","children":[]},{"level":2,"title":"如何保证缓存和数据库数据的一致性？","slug":"如何保证缓存和数据库数据的一致性","link":"#如何保证缓存和数据库数据的一致性","children":[{"level":3,"title":"先更新缓存，再更新 DB","slug":"先更新缓存-再更新-db","link":"#先更新缓存-再更新-db","children":[]},{"level":3,"title":"先更新 DB，再更新缓存","slug":"先更新-db-再更新缓存","link":"#先更新-db-再更新缓存","children":[]},{"level":3,"title":"并发引发的一致性问题","slug":"并发引发的一致性问题","link":"#并发引发的一致性问题","children":[]},{"level":3,"title":"先删除缓存，后更新 DB","slug":"先删除缓存-后更新-db","link":"#先删除缓存-后更新-db","children":[]},{"level":3,"title":"先更新数据库，后删除缓存","slug":"先更新数据库-后删除缓存","link":"#先更新数据库-后删除缓存","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1676019697000,"updatedTime":1676019697000,"contributors":[{"name":"javacode","email":"zysspace@163.com","commits":1}]},"readingTime":{"minutes":10.52,"words":3157},"filePathRelative":"Redis/缓存和数据库一致性解决方案.md","localizedDate":"2023年2月10日","autoDesc":true}');export{e as data};
