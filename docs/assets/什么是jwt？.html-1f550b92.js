import{_ as t,W as e,X as p,Y as n,Z as s,a0 as o,a1 as i,F as l}from"./framework-2afc6763.js";const c={},u=n("h3",{id:"什么是jwt",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#什么是jwt","aria-hidden":"true"},"#"),s(" 什么是jwt")],-1),r=n("p",null,"以下是官网解释",-1),d={href:"https://tools.ietf.org/html/rfc7519",target:"_blank",rel:"noopener noreferrer"},k=n("strong",null,"HMAC",-1),v=n("strong",null,"RSA",-1),m=n("strong",null,"ECDSA",-1),g=n("strong",null,"签名",-1),b=n("p",null,[s("虽然 JWT 可以加密以在各方之间提供保密，但我们将重点关注"),n("em",null,"签名"),s("令牌。签名令牌可以验证其中包含的声明的"),n("em",null,"完整性"),s("，而加密令牌则对其他方"),n("em",null,"隐藏"),s("这些声明。当使用公钥/私钥对对令牌进行签名时，签名还证明只有持有私钥的一方才是对其进行签名的一方。")],-1),h=i(`<p>官网： https://jwt.io/</p><p>标准： https://tools.ietf.org/html/rfc7519</p><p>JWT令牌的优点：</p><ol><li><p>jwt基于json，非常方便解析。</p></li><li><p>可以在令牌中自定义丰富的内容，易扩展。</p></li><li><p>通过非对称加密算法及数字签名技术，JWT防止篡改，安全性高。</p></li><li><p>资源服务使用JWT可不依赖授权服务即可完成授权。</p></li></ol><p>缺点：</p><p>JWT令牌较长，占存储空间比较大。</p><h3 id="jwt应用场景" tabindex="-1"><a class="header-anchor" href="#jwt应用场景" aria-hidden="true">#</a> jwt应用场景</h3><ul><li><strong>授权</strong>：这是使用 JWT 最常见的场景。用户登录后，每个后续请求都将包含 JWT，允许用户访问该令牌允许的路由、服务和资源。单点登录是当今广泛使用 JWT 的一项功能，因为它的开销很小，并且能够轻松跨不同域使用。</li><li><strong>信息交换</strong>：JSON Web Tokens 是一种在各方之间安全传输信息的好方法。因为 JWT 可以被签名——例如，使用公钥/私钥对——你可以确定发件人就是他们所说的那样。此外，由于使用标头和有效负载计算签名，因此您还可以验证内容是否未被篡改。</li></ul><h3 id="jwt组成" tabindex="-1"><a class="header-anchor" href="#jwt组成" aria-hidden="true">#</a> <strong>JWT组成</strong></h3><p>一个JWT实际上就是一个字符串，它由用（.）分割的三部分组成，头部（header）、载荷（payload）与签名 （signature）。</p><p>因此，JWT 通常如下所示。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>xxxxx<span class="token punctuation">.</span>yyyyy<span class="token punctuation">.</span>zzzzz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.xxfxpt.top/202205042117032.png" alt=""></p><p>接下来分别介绍这三个部分</p><h4 id="头部-header" tabindex="-1"><a class="header-anchor" href="#头部-header" aria-hidden="true">#</a> <strong>头部（<strong>header</strong>）</strong></h4><p>头部用于描述关于该JWT的最基本的信息：类型（即JWT）以及签名所用的算法（如 HMACSHA256或RSA）等。</p><p>这也可以被表示成一个JSON对象：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>  
 <span class="token property">&quot;alg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;HS256&quot;</span><span class="token punctuation">,</span>
 <span class="token property">&quot;typ&quot;</span><span class="token operator">:</span> <span class="token string">&quot;JWT&quot;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，这个 JSON 被<strong>Base64Url</strong>编码以形成 JWT 的第一部分。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="载荷-payload" tabindex="-1"><a class="header-anchor" href="#载荷-payload" aria-hidden="true">#</a> <strong>载荷（payload</strong>）</h4><p>存放有效信息的地方，包含三个部分：</p><ul><li>标准中注册的声明（建议但不强制使用），例如，iss: jwt签发者，sub: jwt所面向的用户 ，aud: 接收jwt的一方 ,exp: jwt的过期时间，这个过期时间必须要大于签发时间 ,nbf: 定义在什么时间之前，该jwt都是不可用的，iat: jwt的签发时间 ,jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li></ul><p>​ <strong>iss</strong>: jwt签发者</p><p>​ <strong>sub</strong>: jwt所面向的用户</p><p>​ <strong>aud</strong>: 接收jwt的一方</p><p>​ <strong>exp</strong>: jwt的过期时间，这个过期时间必须要大于签发时间</p><p>​ <strong>nbf</strong>: 定义在什么时间之前，该jwt都是不可用的.</p><p>​ <strong>iat</strong>: jwt的签发时间</p><p>​ <strong>jti</strong>: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</p><ul><li>公共声明：公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不 建议添加敏感信息，因为该部分在客户端可解密。</li><li>私有的声明 ：私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，该部分信息可以归类为明文信息</li></ul><p>定义一个有效载荷</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;sub&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1234567890&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Jack&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;iat&quot;</span><span class="token operator">:</span> <span class="token number">1516239022</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将其进行base64加密，得到Jwt的第二部分:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkphY2siLCJpYXQiOjE1MTYyMzkwMjJ9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="签名-signature" tabindex="-1"><a class="header-anchor" href="#签名-signature" aria-hidden="true">#</a> <strong>签名（<strong>signature</strong>）</strong></h4><p>jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</p><ul><li><p>header (base64加密后的)</p></li><li><p>payload (base64加密后的)</p></li><li><p>secret(密钥，在服务端）</p></li></ul><p>这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var encodedString = base64UrlEncode(header) + &#39;.&#39; + base64UrlEncode(payload);
var signature = HMACSHA256(encodedString, &#39;test&#39;);
5mhBHqs5_DTLdINd9p5m7ZJ6XD0Xc55kIaCRY5r6HRA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把这三个部分连在一起就得到一个完整的jwt</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.5mhBHqs5_DTLdINd9p5m7ZJ6XD0Xc55kIaCRY5r6HRA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的 签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。</p><h3 id="jwt使用" tabindex="-1"><a class="header-anchor" href="#jwt使用" aria-hidden="true">#</a> jwt使用</h3><p>是在请求头里加入Authorization，并加上Bearer标注：<code>Authorization: Bearer &lt;token&gt;</code></p><p>下图显示了如何获取 JWT 并将其用于访问 API 或资源：</p><p><img src="https://cdn2.auth0.com/docs/media/articles/api-auth/client-credentials-grant.png" alt="JSON 网络令牌如何工作"></p><ol><li><p>应用程序或客户端向授权服务器请求授权。</p></li><li><p>当授权被授予时，授权服务器向应用程序返回一个访问令牌。</p></li><li><p>应用程序使用访问令牌来访问受保护的资源（如 API）。</p></li></ol><h3 id="快速使用" tabindex="-1"><a class="header-anchor" href="#快速使用" aria-hidden="true">#</a> 快速使用</h3><p>JJWT是一个提供端到端的JWT创建和验证的Java库。永远免费和开源(Apache License，版本2.0)，JJWT很容易使用和理解。它被设计成一个以建筑为中心的流畅界面，隐藏了它的大部分复杂性。</p><p>引入依赖</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>　　<span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>io<span class="token punctuation">.</span>jsonwebtoken<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>jjwt<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">0.6</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
     <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>   
      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成token</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SECRETKEY</span><span class="token operator">=</span><span class="token string">&quot;1111111&quot;</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;13211111&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;11@qq.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建一个JwtBuilder对象</span>
    <span class="token class-name">JwtBuilder</span> jwtBuilder <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment">//声明的标识{&quot;jti&quot;:&quot;666&quot;}</span>
            <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;666&quot;</span><span class="token punctuation">)</span>
            <span class="token comment">//主体，用户{&quot;sub&quot;:&quot;jack&quot;}</span>
            <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span>
            <span class="token comment">//创建日期{&quot;ita&quot;:&quot;xxxxxx&quot;}</span>
            <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment">//设置过期时间   10分钟</span>
            <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">600</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment">//claims 有效载荷</span>
            <span class="token punctuation">.</span><span class="token function">addClaims</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">&quot;roles&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span>
            <span class="token comment">//签名手段，参数1：算法，参数2：密钥</span>
            <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span><span class="token constant">HS256</span><span class="token punctuation">,</span> <span class="token constant">SECRETKEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取token   jwt</span>
    <span class="token class-name">String</span> token <span class="token operator">=</span> jwtBuilder<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//三部分的base64解密</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//{&quot;alg&quot;:&quot;HS256&quot;}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Base64Codec</span><span class="token punctuation">.</span><span class="token constant">BASE64</span><span class="token punctuation">.</span><span class="token function">decodeToString</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//{&quot;jti&quot;:&quot;666&quot;,&quot;sub&quot;:&quot;jack&quot;,&quot;iat&quot;:1636896993,&quot;exp&quot;:1636897053,&quot;phone&quot;:&quot;13211111&quot;,</span>
    <span class="token string">&quot;email&quot;</span><span class="token operator">:</span><span class="token string">&quot;11@qq.com&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;roles&quot;</span><span class="token operator">:</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;logo&quot;</span><span class="token operator">:</span><span class="token string">&quot;xxx.jpg&quot;</span><span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Base64Codec</span><span class="token punctuation">.</span><span class="token constant">BASE64</span><span class="token punctuation">.</span><span class="token function">decodeToString</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//base64无法解密</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Base64Codec</span><span class="token punctuation">.</span><span class="token constant">BASE64</span><span class="token punctuation">.</span><span class="token function">decodeToString</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>验证解析token</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>public void testParseToken(){
    //token
    String token =&quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI2NjYiLCJzdWIiOiJqYWNrIiwiaWF0IjoxNjM2ODk3NDk2LCJleHAiOjE2MzY4OTgwOTYsInBob25lIjoiMTMyMTExMTEiLCJlbWFpbCI6IjExQHFxLmNvbSIsInJvbGVzIjoiYWRtaW4iLCJsb2dvIjoieHh4LmpwZyJ9.VHZDARQFehcZZsp9Uurd4yWY_TwBwi8UVN01s3r7cfU&quot;;
    //解析token获取载荷中的声明对象
    Claims claims = Jwts.parser()
            .setSigningKey(SECRETKEY)
            .parseClaimsJws(token)
            .getBody();

    System.out.println(&quot;id:&quot;+claims.getId());
    System.out.println(&quot;subject:&quot;+claims.getSubject());
    System.out.println(&quot;issuedAt:&quot;+claims.getIssuedAt());

    DateFormat sf =new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
    System.out.println(&quot;签发时间:&quot;+sf.format(claims.getIssuedAt()));
    System.out.println(&quot;过期时间:&quot;+sf.format(claims.getExpiration()));
    System.out.println(&quot;当前时间:&quot;+sf.format(new Date()));

    System.out.println(&quot;roles:&quot;+claims.get(&quot;roles&quot;));
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>id:666
subject:jack
issuedAt:Sun Nov 14 21:44:56 CST 2021
签发时间:2021-11-14 21:44:56
过期时间:2021-11-14 21:54:56
当前时间:2021-11-14 21:45:30
roles:admin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spring-security-整合oauth2、jwt" tabindex="-1"><a class="header-anchor" href="#spring-security-整合oauth2、jwt" aria-hidden="true">#</a> <strong>Spring Security 整合Oauth2</strong>、JWT</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;dependency&gt; 

    &lt;groupId&gt;org.springframework.security&lt;/groupId&gt; 

    &lt;artifactId&gt;spring‐security‐jwt&lt;/artifactId&gt; 

    &lt;version&gt;1.0.9.RELEASE&lt;/version&gt; 

&lt;/dependency&gt; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,60);function q(j,w){const a=l("ExternalLinkIcon");return e(),p("div",null,[u,r,n("blockquote",null,[n("p",null,[s("JSON Web Token (JWT) 是一个开放标准 ( "),n("a",d,[s("RFC 7519"),o(a)]),s(" )，它定义了一种紧凑且自包含的方式，用于在各方之间作为 JSON 对象安全地传输信息。该信息可以被验证和信任，因为它是经过数字签名的。JWT 可以使用秘密（使用"),k,s("算法）或使用"),v,s("或"),m,s("的公钥/私钥对进行"),g,s("。")]),b]),h])}const J=t(c,[["render",q],["__file","什么是jwt？.html.vue"]]);export{J as default};
