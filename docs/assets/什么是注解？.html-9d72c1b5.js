import{_ as n,W as s,X as a,a1 as t}from"./framework-2afc6763.js";const p={},e=t(`<h3 id="什么是注解" tabindex="-1"><a class="header-anchor" href="#什么是注解" aria-hidden="true">#</a> 什么是注解</h3><p>我们学习注解的第一步，首先就是先从最基本的开始，看看注解到底是什么？</p><blockquote><p>注解和反射是Java中非常让人容易忽略的东西，但却很重要，在主流的Spring中更是充满了注解，注解和注释很像，两者其实本质就差不多，注释是给我们程序员看的，而注解呢其实就是给程序看的。</p></blockquote><p>上面所说希望你着重注意以下两点：</p><p>1、注解和注释很像</p><p>2、注释是给我们程序员看的，而注解呢其实就是给程序看的</p><p>用一个词就可以描述注解，那就是元数据，即一种描述数据的数据。所以，可以说注解就是源代码的元数据。比如，下面这段代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;This is String Representation of current object.&quot;</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码中，我重写了toString()方法并使用了@Override注解。但是，即使我不使用@Override注解标记代码，程序也能够正常执行。那么，该注解表示什么？这么写有什么好处吗？事实上，@Override告诉编译器这个方法是一个重写方法(描述方法的元数据)，如果父类中不存在该方法，编译器便会报错，提示该方法没有重写父类中的方法。如果我不小心拼写错误，例如将toString()写成了toStrring(){}，而且我也没有使用@Override注解，那程序依然能编译运行。但运行结果会和我期望的大不相同。现在我们了解了什么是注解，并且使用注解有助于阅读程序。</p><p>Annotation是一种应用于类、方法、参数、变量、构造器及包声明中的特殊修饰符。它是一种由JSR-175标准选择用来描述元数据的一种工具。</p><p>注解（Annontation），Java5引入的新特性，位于java.lang.annotation包中。提供了一种安全的类似注释的机制，用来将任何的信息或元数据（metadata）与程序元素（类、方法、成员变量等）进行关联。是一种说明、配置、描述性的信息，与具体业务无关，也不会影响正常的业务逻辑。但我们可以用反射机制来进行校验、赋值等操作。</p><blockquote><p>常见的注解：@Override，@author，@param，@Deprecated,@SuppressWarnings。</p></blockquote><h3 id="注解的常见用途" tabindex="-1"><a class="header-anchor" href="#注解的常见用途" aria-hidden="true">#</a> 注解的常见用途：</h3><ul><li>生成文档的注解，如@author，@param。</li><li>跟踪代码依赖性，实现替代配置文件功能，如spring mvc的注解。</li><li>编译时进行格式检查，如@override。</li><li>编译时进行代码生成补全，如lombok插件的@Data。</li></ul><h3 id="注解的分类" tabindex="-1"><a class="header-anchor" href="#注解的分类" aria-hidden="true">#</a> 注解的分类</h3><p><strong>Java内置注解</strong></p><p>举例： <strong>@Override</strong>：这个注解代表重写，但实际并不需要手动在重写方法上添加，编译器在编译时会自动添加 <strong>@Deprecated</strong>：标明已经过时的方法或者类 <strong>@SuppressWarnnings</strong>：关闭一些对方法、类的警告，简单讲，“<strong>我知道代码有问题，但你不要说出来</strong>” 把JDK中主要三个注解单拎出来作为一类是想跟框架提供的注解分开，不容易搞混，不然有人以为注解是spring特有的就尴尬了。</p><p><strong>第三方框架提供的注解</strong></p><p>主流框架Spring中就定义了大量的注解来使得程序编写更加简捷方便，比如**@Bean<strong>代表需要把目标类注册到spring的IOC容器中，随用随拿，</strong>@Repository<strong>用来标记数据访问组件，</strong>@Controller<strong>标记控制层组件，</strong>@Before<strong>代表方法执行前执行，</strong>@After**代表方法执行后执行等等。 *这类也是算自定义注解，只不过它是框架定义的。</p><p><strong>自定义注解</strong></p><p>程序员在实际开发中为了满足业务中某些切面设计要求而设定的注解，只要符合自定义注解规范即可。</p><p><strong>元注解</strong></p><p>简单讲就是定义<strong>注解的注解，就跟描述类的类</strong>一样，其他类型的注解只需知道是什么作用，会用就行，但想彻底了解注解就得从元注解入手。要创建一个自定义注解，元注解是必不可少的，下面就简单说下元注解的定义规则，先不写例子，就看下jdk提供的注解**@Override**的源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">SOURCE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Override</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>java.lang.annotation提供了四种元注解：</p><ul><li>@Documented – 注解是否将包含在JavaDoc中</li><li>@Retention – 什么时候使用该注解</li><li>@Target – 注解用于什么地方</li><li>@Inherited – 是否允许子类继承该注解</li><li>@Repeatable - 是否可重复注解，jdk1.8引入</li></ul><h3 id="注解的使用" tabindex="-1"><a class="header-anchor" href="#注解的使用" aria-hidden="true">#</a> 注解的使用</h3><p>1、定义注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 防止重复提交注解
 * <span class="token keyword">@author</span> zys
 */</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Resubmit</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 延时时间 在延时多久后可以再次提交
     *
     * <span class="token keyword">@return</span> Time unit is one second
     */</span>
    <span class="token keyword">int</span> <span class="token function">delaySeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先有一个**@interface<strong>规定语法来跟编辑器说这是一个注解，接着还需加上</strong>@Target<strong>和</strong>@Retention**这两个元注解，各自的含义解释：</p><h3 id="target" tabindex="-1"><a class="header-anchor" href="#target" aria-hidden="true">#</a> <strong>@Target</strong></h3><p>同一个注解总不能什么地方都能用吧，方法、属性、构造函数还是有区别的，得分一下，target就是指定该注解能被使用的位置（挑一些常用的解释下）：</p><ul><li>类或接口：<code>ElementType.TYPE</code></li><li>字段：<code>ElementType.FIELD</code></li><li>方法：<code>ElementType.METHOD</code></li><li>构造方法：<code>ElementType.CONSTRUCTOR</code></li><li>方法参数：<code>ElementType.PARAMETER</code></li><li>注解: <code>ElementType.ANNOTATION_TYPE</code></li></ul><p>@Target支持设置多个位置，比如想放在<strong>类或者方法</strong>上，那么可以这样写： <code>@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})</code> 如果是单个，则允许省去{}符号</p><h3 id="retention" tabindex="-1"><a class="header-anchor" href="#retention" aria-hidden="true">#</a> <strong>@Retention</strong></h3><p>定义了注解的生命周期，默认是<code>RetentionPolicy.CLASS</code></p><p>格式如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">SOURCE</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>仅编译期：<code>RetentionPolicy.SOURCE</code> 不会被jvm编译进class文件中</li><li>仅class文件：<code>RetentionPolicy.CLASS</code> 在class文件中有效，在类加载的时被丢弃，运行时无法获取到。</li><li>运行期：<code>RetentionPolicy.RUNTIME</code> 运行时有效，可以使用反射获得该注解的信息。自定义的注解最常用的使用方式。</li></ul><p><strong>注解也是一种类，继承自 <code>java.lang.annotation.Annotation</code></strong> ，所以也会被编译成class文件，就拿上面生命周期最短的<code>RetentionPolicy.SOURCE</code>来说，它是指这类注解在变成class文件之前就被**注解处理器（Annotation Processor）**去掉了，等于说不会被编译到class文件中。 生命周期第二短的<code>RetentionPolicy.Class</code> 会被编译到class文件中，不过在加载后该类型的注解就会被丢弃，而<code>RetentionPolicy.RUNTIME</code>不光会被编译到class文件，在加载之后也会被保留，在运行期间可以反射读取对应的一些方法和变量信息。</p><p>所以生命周期范围大小是： <strong><code>RetentionPolicy.SOURCE（编译）</code> &lt; <code>RetentionPolicy.Class（类加载）</code> &lt; <code>RetentionPolicy.RUNTIME（运行）</code></strong></p><p>在实际应用中，需要程序在运行过程中去解析一个class对象，反射获取变量方法来执行一些操作，所以 <code>RetentionPolicy.RUNTIME</code>是最恰当的（连反射都反射不到，自定义注解拿来干啥？）。</p><h3 id="其他的元注解" tabindex="-1"><a class="header-anchor" href="#其他的元注解" aria-hidden="true">#</a> 其他的元注解</h3><p>还有一些其他的元注解我觉得可以<strong>一笔带过</strong>，因为真的不常用：</p><ul><li>@Repeatable 自定义注解是否可重复，就是说加这个元注解之后，在同一个方法（打比方）上面可以添加多个相同的自定义注解</li><li>@Inherited 定义子类是否可继承父类定义的注解，就是说父类定义了一个注解，子类继承父类后也会自动继承该注解</li><li>@Documented 将注解中的元素包含到Javadoc中去，用来生成javadoc用</li></ul><h3 id="注解的属性" tabindex="-1"><a class="header-anchor" href="#注解的属性" aria-hidden="true">#</a> 注解的属性</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SignCheck</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;啦啦啦&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>感觉有点奇怪，为什么定义一个参数后面会跟 <code>()</code> ，这不是方法的格式吗？其实你这样可以理解，String value()只是一个接口中待实现的方法，<strong>在实际的使用过程中比如反射获取注解对象信息时</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SignCheck</span> signCheck <span class="token operator">=</span> <span class="token punctuation">[</span>某个<span class="token class-name">Class</span>对象<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">SignCheck</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过反射获取直接注解对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>会在内存中生成一个实现该注解接口的子类对象，<strong>这个return看起来就很好理解了</strong>：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//实际不会产生以下代码，按照上述思路假设</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SignCheckImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SignCheck</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> 给注解赋的value值<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义注解中如果定义另一个属性值叫 <code>value()</code> ，那么在实际使用过程中注解不加这个属性值也能赋予自定义注解变量，但如果属性值定义了多个，就必须一一指明对应：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SignCheck</span><span class="token punctuation">(</span><span class="token string">&quot;lala&quot;</span><span class="token punctuation">)</span> <span class="token comment">//等价于@SignCheck(value = &quot;lala&quot;)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">annotationtest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注解的属性值支持很多类型，除了String，还有八种基本数据类型，Class、枚举类，甚至是注解都可以。 上面的自定义注解扩充下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SignCheck</span> <span class="token punctuation">{</span>

    <span class="token comment">//基本数据类型</span>
    <span class="token keyword">int</span> <span class="token function">iValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> <span class="token function">douValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token function">lonValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> <span class="token function">floValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token function">chValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> <span class="token function">booValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">short</span> <span class="token function">shoValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span> <span class="token function">byteValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//字符串类型，注意跟char的区别</span>
    <span class="token class-name">String</span> <span class="token function">stringValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//注解类</span>
    <span class="token class-name">ExampleAnnoation</span> <span class="token function">annocationValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Class</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">classValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//枚举类</span>
    <span class="token class-name">WeekEnum</span> <span class="token function">enumValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//还有一些数组，下面就举一个例子</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">iListValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">WeekEnum</span><span class="token punctuation">{</span>
    <span class="token class-name">Monday</span><span class="token punctuation">,</span>
    <span class="token class-name">Tuesday</span><span class="token punctuation">,</span>
    <span class="token class-name">Wednesday</span><span class="token punctuation">,</span>
    <span class="token class-name">Thursday</span><span class="token punctuation">,</span>
    <span class="token class-name">Friday</span><span class="token punctuation">,</span>
    <span class="token class-name">Saturday</span><span class="token punctuation">,</span>
    <span class="token class-name">Sunday</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@interface</span> <span class="token class-name">ExampleAnnoation</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何使用自定义注解" tabindex="-1"><a class="header-anchor" href="#如何使用自定义注解" aria-hidden="true">#</a> 如何使用自定义注解</h3><p>这个不会陌生，因为平常潜移默化的时候已经在用了，只需要在对的地方（target指定的类/方法/变量等）加上相应的注解和变量就行了，比如上面 <code>SignCheck</code> 注解可以用在方法和类上，那么我们随便找一个方法，在其头部加上注解并声明变量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@Resubmit</span><span class="token punctuation">(</span>delaySeconds <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="利用反射获取注解信息" tabindex="-1"><a class="header-anchor" href="#利用反射获取注解信息" aria-hidden="true">#</a> 利用反射获取注解信息</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">RunBefore</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">run_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;这是默认的值&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnocationTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnnocationTest</span><span class="token punctuation">&gt;</span></span> annocationTestClass <span class="token operator">=</span> <span class="token class-name">AnnocationTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token comment">//反射获取testAnnocation方法 这里只举例Method类</span>
        <span class="token class-name">Method</span> method <span class="token operator">=</span> annocationTestClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;testAnnocation&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//判断是否存在某个注解对象</span>
        <span class="token keyword">boolean</span> isExist <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">RunBefore</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是否存在目标注解：&quot;</span> <span class="token operator">+</span> isExist<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//反射获取目标注解对象</span>
        <span class="token class-name">RunBefore</span> runBefore <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RunBefore</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;注解对象属性：&quot;</span> <span class="token operator">+</span> runBefore<span class="token punctuation">.</span><span class="token function">run_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RunBefore</span><span class="token punctuation">(</span>run_name <span class="token operator">=</span> <span class="token string">&quot;测试注解运行&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAnnocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多注解的获取" tabindex="-1"><a class="header-anchor" href="#多注解的获取" aria-hidden="true">#</a> 多注解的获取</h3><p>上面的例子只是举了反射方法类 <code>Method</code> 上的注解，其他的诸如Field、Class、Constructor操作API都类似，可以自己敲一遍，之所以拿方法类来举例是因为觉得方法类反射会麻烦点，比如testAnnocation方法改成这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAnnocation</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> <span class="token annotation punctuation">@Range</span><span class="token punctuation">(</span>minlength <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>maxlength <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name
    <span class="token punctuation">,</span><span class="token annotation punctuation">@CanBeNull</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个方法中包多个参数，一个参数包含多个注解（构造器也会这种情况），那么就需要定义一个<strong>二维数组</strong>来接收这些反射数据，有一个 <code>getParameterAnnotations</code> 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">public</span> <span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getParameterAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">sharedGetParameterAnnotations</span><span class="token punctuation">(</span>parameterTypes<span class="token punctuation">,</span> parameterAnnotations<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那应该这么接收了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnnocationTest</span><span class="token punctuation">&gt;</span></span> annocationTestClass <span class="token operator">=</span> <span class="token class-name">AnnocationTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token comment">//反射获取testAnnocation方法</span>
<span class="token class-name">Method</span> method <span class="token operator">=</span> annocationTestClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;testAnnocation&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取所有参数的Annotation:</span>
<span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annos <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anno <span class="token operator">:</span> annos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Annotation</span> annotation <span class="token operator">:</span> anno<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token keyword">instanceof</span> <span class="token class-name">StringRange</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//StringRange注解</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;找到了StringRange注解&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;minlength:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">StringRange</span><span class="token punctuation">)</span> annotation<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minlength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;maxlength:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">StringRange</span><span class="token punctuation">)</span> annotation<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxlength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token keyword">instanceof</span> <span class="token class-name">NotNull</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//NotNull注解</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;找到了NotNull注解&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token keyword">instanceof</span> <span class="token class-name">CanBeNull</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//CanBeNull注解</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;找到了CanBeNull注解&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>双重遍历，先<strong>遍历方法method中的param参数，然后再遍历params参数中的各个注解</strong>，根据返回的类型判断来找到对应的注解和输出对应的值：</p><blockquote><p>找到NotNull注解 找到StringRange注解 minlength:5 maxlength:10 找到CanBeNull注解</p></blockquote><h3 id="自定义注解示例" tabindex="-1"><a class="header-anchor" href="#自定义注解示例" aria-hidden="true">#</a> 自定义注解示例</h3><p>1、自定义注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Resubmit</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 延时时间 在延时多久后可以再次提交
     *
     * <span class="token keyword">@return</span> Time unit is one second
     */</span>
    <span class="token keyword">int</span> <span class="token function">delaySeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、AOP 切面</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>common<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resubmit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>common<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">ResubmitLock</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>common<span class="token punctuation">.</span>dto<span class="token punctuation">.</span></span><span class="token class-name">RequestDTO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>common<span class="token punctuation">.</span>dto<span class="token punctuation">.</span></span><span class="token class-name">ResponseDTO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>common<span class="token punctuation">.</span>enums<span class="token punctuation">.</span></span><span class="token class-name">ResponseCode</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">Log4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Around</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">MethodSignature</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 数据重复提交校验
 **/</span>
<span class="token annotation punctuation">@Log4j</span>
<span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResubmitDataAspect</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">DATA</span> <span class="token operator">=</span> <span class="token string">&quot;data&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token constant">PRESENT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;@annotation(com.cn.xxx.annotation.Resubmit)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">handleResubmit</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取注解信息</span>
        <span class="token class-name">Resubmit</span> annotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Resubmit</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> delaySeconds <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">delaySeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pointArgs <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//获取第一个参数</span>
        <span class="token class-name">Object</span> firstParam <span class="token operator">=</span> pointArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstParam <span class="token keyword">instanceof</span> <span class="token class-name">RequestDTO</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//解析参数</span>
            <span class="token class-name">JSONObject</span> requestDTO <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>firstParam<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">JSONObject</span> data <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>requestDTO<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token constant">DATA</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//生成加密参数 使用了content_MD5的加密方式</span>
                key <span class="token operator">=</span> <span class="token class-name">ResubmitLock</span><span class="token punctuation">.</span><span class="token function">handleKey</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//执行锁</span>
        <span class="token keyword">boolean</span> lock <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//设置解锁key</span>
            lock <span class="token operator">=</span> <span class="token class-name">ResubmitLock</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">PRESENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//放行</span>
                <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">//响应重复提交异常</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">REPEAT_SUBMIT_OPERATION_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">//设置解锁key和解锁时间</span>
            <span class="token class-name">ResubmitLock</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unLock</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> key<span class="token punctuation">,</span> delaySeconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、注解使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/posts/save&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Resubmit</span><span class="token punctuation">(</span>delaySeconds <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ResponseDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BaseResponseDataDTO</span><span class="token punctuation">&gt;</span></span> <span class="token function">saveOrder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBodyRequestDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderDTO</span><span class="token punctuation">&gt;</span></span> requestDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整示例：https://zhuanlan.zhihu.com/p/460493986</p>`,77),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","什么是注解？.html.vue"]]);export{k as default};
