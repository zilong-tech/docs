const e=JSON.parse('{"key":"v-07dc71fa","path":"/Java/java%20stream%20%E7%9C%8B%E8%BF%99%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B0%B1%E5%A4%9F%E4%BA%86.html","title":"java stream 看这一篇文章就够了","lang":"zh-CN","frontmatter":{"title":"java stream 看这一篇文章就够了","author":"程序员子龙","index":true,"icon":"discover","category":["Java 基础"],"description":"Lambda表达式简介 Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。 Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。 使用 Lambda 表达式可以使代码变的更加简洁紧凑。 可以把Lambda表达式理解为简洁的表示可传递的匿名函数的一种方式：它没有名称，但它有参数列表，函数主体，返回类型，可...","head":[["meta",{"property":"og:url","content":"https://zilong-tech.github.io/docs/docs/Java/java%20stream%20%E7%9C%8B%E8%BF%99%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B0%B1%E5%A4%9F%E4%BA%86.html"}],["meta",{"property":"og:site_name","content":"子龙技术"}],["meta",{"property":"og:title","content":"java stream 看这一篇文章就够了"}],["meta",{"property":"og:description","content":"Lambda表达式简介 Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。 Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。 使用 Lambda 表达式可以使代码变的更加简洁紧凑。 可以把Lambda表达式理解为简洁的表示可传递的匿名函数的一种方式：它没有名称，但它有参数列表，函数主体，返回类型，可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-15T08:23:34.000Z"}],["meta",{"property":"article:author","content":"程序员子龙"}],["meta",{"property":"article:modified_time","content":"2023-02-15T08:23:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"java stream 看这一篇文章就够了\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-15T08:23:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员子龙\\"}]}"]]},"headers":[{"level":3,"title":"Lambda表达式简介","slug":"lambda表达式简介","link":"#lambda表达式简介","children":[]},{"level":3,"title":"函数式接口","slug":"函数式接口","link":"#函数式接口","children":[]},{"level":2,"title":"Function","slug":"function","link":"#function","children":[{"level":3,"title":"接收单个参数","slug":"接收单个参数","link":"#接收单个参数","children":[]},{"level":3,"title":"接收两个参数","slug":"接收两个参数","link":"#接收两个参数","children":[]}]},{"level":2,"title":"Consumer","slug":"consumer","link":"#consumer","children":[{"level":3,"title":"接收一个参数","slug":"接收一个参数","link":"#接收一个参数","children":[]},{"level":3,"title":"接收两个参数","slug":"接收两个参数-1","link":"#接收两个参数-1","children":[]}]},{"level":2,"title":"Supplier","slug":"supplier","link":"#supplier","children":[]},{"level":2,"title":"Predicate","slug":"predicate","link":"#predicate","children":[{"level":3,"title":"方法引用","slug":"方法引用","link":"#方法引用","children":[]},{"level":3,"title":"Stream","slug":"stream","link":"#stream","children":[]},{"level":3,"title":"什么是 Stream？","slug":"什么是-stream","link":"#什么是-stream","children":[]},{"level":3,"title":"怎么使用Stream？","slug":"怎么使用stream","link":"#怎么使用stream","children":[]},{"level":3,"title":"创建流","slug":"创建流","link":"#创建流","children":[]},{"level":3,"title":"stream方法使用","slug":"stream方法使用","link":"#stream方法使用","children":[]},{"level":3,"title":"forEach()","slug":"foreach","link":"#foreach","children":[]},{"level":3,"title":"filter()","slug":"filter","link":"#filter","children":[]},{"level":3,"title":"distinct()","slug":"distinct","link":"#distinct","children":[]},{"level":3,"title":"sorted()","slug":"sorted","link":"#sorted","children":[]},{"level":3,"title":"map()","slug":"map","link":"#map","children":[]},{"level":3,"title":"flatMap()","slug":"flatmap","link":"#flatmap","children":[]},{"level":3,"title":"规约操作","slug":"规约操作","link":"#规约操作","children":[]},{"level":3,"title":"reduce()","slug":"reduce","link":"#reduce","children":[]},{"level":3,"title":"collect()","slug":"collect","link":"#collect","children":[]}]}],"git":{"createdTime":1676449414000,"updatedTime":1676449414000,"contributors":[{"name":"javacode","email":"zysspace@163.com","commits":1}]},"readingTime":{"minutes":18.52,"words":5556},"filePathRelative":"Java/java stream 看这一篇文章就够了.md","localizedDate":"2023年2月15日","autoDesc":true}');export{e as data};
