import{_ as n,W as s,X as a,a1 as e}from"./framework-2afc6763.js";const t={},p=e(`<h3 id="什么是编解码器" tabindex="-1"><a class="header-anchor" href="#什么是编解码器" aria-hidden="true">#</a> <strong>什么是编解码器</strong></h3><p>每个网络应用程序都必须定义如何解析在两个节点之间来回传输的原始字节，以及如何 将其和目标应用程序的数据格式做相互转换。这种转换逻辑由编解码器处理，编解码器由编码器和解码器组成，它们每种都可以将字节流从一种格式转换为另一种格式。那么它们的区 别是什么呢？</p><p>如果将消息看作是对于特定的应用程序具有具体含义的结构化的字节序列—它的数据。 那么编码器是将消息转换为适合于传输的格式（最有可能的就是字节流）；而对应的解码器则是将网络字节流转换回应用程序的消息格式。因此，编码器操作出站数据，而解码器处理入站数据。</p><h3 id="入站和出站" tabindex="-1"><a class="header-anchor" href="#入站和出站" aria-hidden="true">#</a> 入站和出站</h3><p><strong>以客户端应用程序为例</strong>，如果事件的运动方向是从客户端到服务端的，那么我们称这些事件为<strong>出站</strong>。反之称为<strong>入站</strong>。</p><h3 id="netty-编解码" tabindex="-1"><a class="header-anchor" href="#netty-编解码" aria-hidden="true">#</a> Netty 编解码</h3><p>Netty涉及到编解码的组件有Channel、ChannelHandler、ChannelPipe等。</p><p><strong>ChannelHandler</strong></p><p>ChannelHandler充当了处理入站和出站数据的应用程序逻辑容器。例如，实现ChannelInboundHandler接口（或ChannelInboundHandlerAdapter），你就可以接收入站事件和数据，这些数据随后会被你的应用程序的业务逻辑处理。当你要给连接的客户端发送响应时，也可以从ChannelInboundHandler冲刷数据。你的业务逻辑通常写在一个或者多个ChannelInboundHandler中。ChannelOutboundHandler原理一样，只不过它是用来处理出站数据的。</p><p><strong>ChannelPipeline</strong></p><p>ChannelPipeline提供了ChannelHandler链的容器。对于出站，即客户端发送给服务端的数据会通过pipeline中的一系列<strong>ChannelOutboundHandler(ChannelOutboundHandler调用是</strong>从tail到head方向<strong>逐个调用每个handler的逻辑)</strong>，并被这些Handler处理，<strong>入站只调用pipeline里的</strong>ChannelInboundHandler<strong>逻辑</strong>(ChannelInboundHandler调用是<strong>从head到tail方向</strong>逐个调用每个handler的逻辑)。</p><p><img src="https://note.youdao.com/yws/public/resource/b8970e44473486a48178193d68929008/xmlnote/B401EBCE53ED4A959BDD4CC702D70B6E/85302" alt=""></p><p>通过Netty发送或者接受一个消息的时候，就将会发生一次数据转换。入站消息会被<strong>解码</strong>：从字节转换为另一种格式（比如java对象）；如果是出站消息，它会被<strong>编码成字节</strong>。</p><p>Netty提供了一系列实用的编码解码器，他们都实现了ChannelInboundHadnler或者ChannelOutboundHandler接口。在这些类中，channelRead方法已经被重写了。以入站为例，对于每个从入站Channel读取的消息，这个方法会被调用。随后，它将调用由已知解码器所提供的decode()方法进行解码，并将已经解码的字节转发给ChannelPipeline中的下一个ChannelInboundHandler。</p><p>Netty提供了很多编解码器，比如编解码字符串的StringEncoder和StringDecoder，编解码对象的ObjectEncoder和ObjectDecoder等。</p><h3 id="解码器" tabindex="-1"><a class="header-anchor" href="#解码器" aria-hidden="true">#</a> 解码器</h3><p>将字节解码为消息——ByteToMessageDecoder</p><p>将一种消息类型解码为另一种——MessageToMessageDecoder。</p><p>因为解码器是负责将入站数据从一种格式转换到另一种格式的，所以 Netty 的解码器实现了 ChannelInboundHandler。什么时候会用到解码器呢？很简单：每当需要为 ChannelPipeline 中的下一个 ChannelInboundHandler 转换入站数据时会用到。此外，得益于 ChannelPipeline 的设计，可以将多个解码器链接在一起，以实现任意复杂的转换逻辑。</p><p><strong>将字节解码为消息</strong></p><p><strong>抽象类</strong> <strong>ByteToMessageDecoder</strong></p><p>将字节解码为消息（或者另一个字节序列）是一项如此常见的任务，以至于 Netty 为它提供了一个抽象的基类：ByteToMessageDecoder。由于你不可能知道远程节点是否会一次性地发送一个完整的消息，所以这个类会对入站数据进行缓冲，直到它准备好处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span><span class="token class-name">ByteBuf</span> in<span class="token punctuation">,</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是必须实现的唯一抽象方法。decode()方法被调用时将会传入一个包含了传入数据 的 ByteBuf，以及一个用来添加解码消息的 List。对这个方法的调用将会重复进行，直到确 定没有新的元素被添加到该 List，或者该 ByteBuf 中没有更多可读取的字节时为止。如果该 List 不为空，那么它的内容将会被传递给 ChannelPipeline 中的下一个 ChannelInboundHandler。</p><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FrameChunkDecoder</span> <span class="token keyword">extends</span> <span class="token class-name">ByteToMessageDecoder</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> maxFrameSize<span class="token punctuation">;</span>

    <span class="token comment">//指定将要产生的帧的最大允许大小</span>
    <span class="token keyword">public</span> <span class="token class-name">FrameChunkDecoder</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxFrameSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxFrameSize <span class="token operator">=</span> maxFrameSize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> in<span class="token punctuation">,</span>
                          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> readableBytes <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>readableBytes <span class="token operator">&gt;</span> maxFrameSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//如果该帧超出允许的大小，则丢弃它并抛出一个 TooLongFrameException</span>
            in<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TooLongFrameException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//否则，从 ByteBuf 中读取一个新的帧</span>
        <span class="token class-name">ByteBuf</span> buf <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>readableBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将该帧添加到解码 读取一个新的帧消息的 List 中</span>
        <span class="token comment">// todo 可以将消息转换成Java 对象</span>
        out<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>将一种消息类型解码为另一种</strong></p><p>在两个消息格式之间进行转换（例如，从 String-&gt;Integer）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span><span class="token class-name">I</span> msg<span class="token punctuation">,</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于每个需要被解码为另一种格式的入站消息来说，该方法都将会被调用。解码消息随后会被传递给 ChannelPipeline 中的下一个 ChannelInboundHandler</p><p><code>MessageToMessageDecoder&lt;T&gt;</code>，T 代表源数据的类型</p><p><strong>Netty中的几种常用 Decoder</strong></p><ul><li>LineBasedFrameDecoder(行分割数据包解码器,<strong>最基础的一种解码器</strong>)</li><li>FixedLengthFrameDecoder(固定长度数据包解码器)</li><li>DelimiterBasedFrameDecoder(自定义分隔符数据包解码器)</li><li>LengthFieldBasedFrameDecoder(自定义长度数据包解码器,<strong>最为复杂的一种解码器</strong>)</li></ul><h3 id="编码器" tabindex="-1"><a class="header-anchor" href="#编码器" aria-hidden="true">#</a> <strong>编码器</strong></h3><p>将消息编码为字节：<code>MessageToByteEncoder&lt;I&gt;</code></p><p>将消息编码为消息： <code>MessageToMessageEncoder&lt;T&gt;</code>，T 代表源数据的类型</p><p><strong>将消息编码为字节</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span><span class="token class-name">I</span> msg<span class="token punctuation">,</span><span class="token class-name">ByteBuf</span> out<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>encode()方法是你需要实现的唯一抽象方法。它被调用时将会传入要被该类编码为 ByteBuf 的出站消息（类型为 I 的）。该 ByteBuf 随后将会被转发给 ChannelPipeline 中的下一个 ChannelOutboundHandler</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShortToByteEncoder</span> <span class="token keyword">extends</span> <span class="token class-name">MessageToByteEncoder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Short</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Short</span> msg<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> out<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//写 Short 到 ByteBuf</span>
        out<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.wenjiangs.com/wp-content/uploads/2020/11/db4db903bde1392.jpg" alt=""></p><p><strong>将消息编码为消息</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span><span class="token class-name">I</span> msg<span class="token punctuation">,</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是你需要实现的唯一方法。每个通过 write()方法写入的消息都将会被传递给 encode() 方法，以编码为一个或者多个出站消息。随后，这些出站消息将会被转发给 ChannelPipeline 中的下一个 ChannelOutboundHandler。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntegerToStringEncoder</span> <span class="token keyword">extends</span>  <span class="token class-name">MessageToMessageEncoder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Integer</span> msg<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//转 Integer 为 String，并添加到 MessageBuf    </span>
        out<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.wenjiangs.com/wp-content/uploads/2020/11/b6c82d5d1a6e3d4.jpg" alt=""></p><p><strong>LengthFieldPrepender</strong></p><p>大多数的协议（私有或者公有），协议头中会携带长度字段，用于标识消息体或者整包消息的长度，例如SMPP、HTTP协议等。由于基于长度解码需求 的通用性，Netty提供了<code>LengthFieldBasedFrameDecoder</code>/<code>LengthFieldPrepender</code>，自动屏蔽TCP底层的拆包和粘包问题，只需要传入正确的参数，即可轻松解决“读半包“问题。</p><p>发送方使用LengthFieldPrepender给实际内容Content进行编码添加报文头<strong>Length</strong>字段，接受方使用LengthFieldBasedFrameDecoder进行解码。协议格式如下所示：</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span>
<span class="token operator">|</span> Length <span class="token operator">|</span>  Content <span class="token operator">|</span>
<span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Length字段：</strong></p><p>表示Conent部分的字节数，例如Length值为100，那么意味着Conent部分占用的字节数就是100。</p><p>Length字段本身是个整数，也要占用字节，一般会使用固定的字节数表示。例如我们指定使用2个字节(有符号)表示length，那么可以表示的最大值为32767(约等于32K)，也就是说，Content部分占用的字节数，最大不能超过32767。当然，Length字段存储的是Content字段的真实长度。</p><p><strong>Content字段：</strong></p><p>是我们要处理的真实二进制数据。 在发送Content内容之前，首先需要获取其真实长度，添加在内容二进制流之前，然后再发送。Length占用的字节数+Content占用的字节数，就是我们总共要发送的字节。</p><p>事实上，我们可以把Length部分看做报文头，报文头包含了解析报文体(Content字段)的相关元数据，例如Length报文头表示的元数据就是Content部分占用的字节数。当然，LengthFieldBasedFrameDecoder并没有限制我们只能添加Length报文头，我们可以在Length字段前或后，加上一些其他的报文头，此时协议格式如下所示：</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code>  <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span>
  <span class="token operator">|</span><span class="token operator">...</span><span class="token operator">...</span><span class="token operator">..</span> <span class="token operator">|</span> Length <span class="token operator">|</span>  <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span> <span class="token operator">|</span>  Content <span class="token operator">|</span>
  <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过对于LengthFieldBasedFrameDecoder而言，其关心的只是Length字段。因此当我们在构造一个LengthFieldBasedFrameDecoder时，最主要的就是告诉其如何处理Length字段。</p><p>LengthFieldPrepender提供了多个构造方法，最终调用的都是：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">LengthFieldPrepender</span><span class="token punctuation">(</span><span class="token keyword">int</span> lengthFieldLength<span class="token punctuation">,</span> <span class="token keyword">boolean</span> lengthIncludesLengthFieldLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span>lengthFieldLength<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> lengthIncludesLengthFieldLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">LengthFieldPrepender</span><span class="token punctuation">(</span>
            <span class="token class-name">ByteOrder</span> byteOrder<span class="token punctuation">,</span> <span class="token keyword">int</span> lengthFieldLength<span class="token punctuation">,</span>
            <span class="token keyword">int</span> lengthAdjustment<span class="token punctuation">,</span> <span class="token keyword">boolean</span> lengthIncludesLengthFieldLength<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中：</p><ul><li>byteOrder：表示Length字段本身占用的字节数使用的是大端还是小端编码</li><li>lengthFieldLength：表示Length字段本身占用的字节数,只可以指定 1, 2, 3, 4, 或 8</li><li>lengthAdjustment：表示Length字段调整值</li><li>lengthIncludesLengthFieldLength：表示Length字段本身占用的字节数是否包含在Length字段表示的值中。</li></ul><p>例如：对于以下包含12个字节的报文</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>   +----------------+
   <span class="token operator">|</span> <span class="token string">&quot;HELLO, WORLD&quot;</span> <span class="token operator">|</span>
   +----------------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设我们指定Length字段占用2个字节，lengthIncludesLengthFieldLength指定为false，即不包含本身占用的字节，那么Length字段的值为0x000C(即12)。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>+--------+----------------+
+ 0x000C <span class="token operator">|</span> <span class="token string">&quot;HELLO, WORLD&quot;</span> <span class="token operator">|</span>
+--------+----------------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们指定lengthIncludesLengthFieldLength指定为true，那么Length字段的值为：0x000E(即14)=Length(2)+Content字段(12)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>+--------+----------------+
+ 0x000E <span class="token operator">|</span> <span class="token string">&quot;HELLO, WORLD&quot;</span> <span class="token operator">|</span>
+--------+----------------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于<strong>lengthAdjustment</strong>字段的含义，参见下面的LengthFieldBasedFrameDecoder。</p><p>LengthFieldPrepender尤其值得说明的一点是，其提供了实现零拷贝的另一种思路(<code>实际上编码过程，是零拷贝的一个重要应用场景</code>)。</p><ul><li>在Netty中我们可以使用ByteBufAllocator.directBuffer()创建直接缓冲区实例，从而避免数据从堆内存(用户空间)向直接内存(内核空间)的拷贝，这是系统层面的零拷贝；</li><li>也可以使用<code>CompositeByteBuf</code>把两个ByteBuf合并在一起，例如一个存放报文头，另一个存放报文体。而不是创建一个更大的ByteBuf，把两个小ByteBuf合并在一起，这是应用层面的零拷贝。</li></ul><p>而LengthFieldPrepender，由于需要在原来的二进制数据之前添加一个Length字段，因此就需要对二者进行合并发送。但是LengthFieldPrepender并没有采用CompositeByteBuf，其编码过程如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> msg<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">&gt;</span> <span class="token keyword">out</span><span class="token punctuation">)</span> <span class="token return-type class-name">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token comment">//1 获得Length字段的值：真实数据可读字节数+Length字段调整值</span>
       <span class="token class-name"><span class="token keyword">int</span></span> length <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> lengthAdjustment<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lengthIncludesLengthFieldLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            length <span class="token operator">+=</span> lengthFieldLength<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token range operator">..</span><span class="token punctuation">.</span>
        
        <span class="token comment">//2 根据lengthFieldLength指定的值(1、2、3、4、8)，创建一个ByteBuffer实例，写入length的值，</span>
        <span class="token comment">//并添加到List类型的out变量中</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>lengthFieldLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&gt;=</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IllegalArgumentException</span><span class="token punctuation">(</span>
                        <span class="token string">&quot;length does not fit into a byte: &quot;</span> <span class="token operator">+</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token keyword">add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>byteOrder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token range operator">..</span><span class="token punctuation">.</span>   
        <span class="token keyword">case</span> <span class="token number">8</span><span class="token punctuation">:</span>
            <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token keyword">add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>byteOrder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;should not reach here&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//3 最后，再将msg本身添加到List中(msg.retain是增加一次引用，返回的还是msg本身)</span>
        <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token keyword">add</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">retain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，LengthFieldPrepender实际上是先把Length字段(报文头)添加到List中，再把msg本身(报文)添加到List中。而在发送数据时，LengthFieldPrepender的父类MessageToMessageEncoder会按照List中的元素下标按照顺序发送，因此相当于间接的把Length字段添加到了msg之前。从而避免了创建一个更大的ByteBuf将Length字段和msg内容合并到一起。作为开发者的我们，在编写编码器的时候，这种一种重要的实现零拷贝的参考思路。</p>`,74),o=[p];function c(l,r){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","编解码器.html.vue"]]);export{u as default};
